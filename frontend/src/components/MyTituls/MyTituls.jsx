import React, { useEffect, useState, useMemo, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import s from './MyTituls.module.scss';

const MyTituls = ({ snakeScore, rpsWins, flappyScore }) => {
  const [titlesUnlocked, setTitlesUnlocked] = useState([]);
  const [newlyUnlocked, setNewlyUnlocked] = useState([]);
  const navigate = useNavigate();
  const audioRef = useRef(null);

  const missionConditions = useMemo(() => ({
    snakeScore20: {
      condition: snakeScore >= 20,
      title: '–ú–∞—Å—Ç–µ—Ä –∑–º–µ–π–∫–∏ üêç',
      requirement: '–°–¥–µ–ª–∞—Ç—å —Å—á—ë—Ç 20 –≤ –ó–º–µ–π–∫–µ',
    },
    rpsWins30: {
      condition: rpsWins >= 30,
      title: '–ß–µ–º–ø–∏–æ–Ω –†–ü–° ‚úä‚úã‚úåÔ∏è',
      requirement: '–í—ã–∏–≥—Ä–∞—Ç—å 30 —Ä–∞–∑ –≤ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞',
    },
    flappyScore100: {
      condition: flappyScore >= 100,
      title: '–õ–µ—Ç—É–Ω 100 —É—Ä–æ–≤–Ω—è üê§',
      requirement: '–°–¥–µ–ª–∞—Ç—å —Å—á—ë—Ç 100 –≤ Flappy Bird',
    },
  }), [snakeScore, rpsWins, flappyScore]);

  useEffect(() => {
    const saved = JSON.parse(localStorage.getItem('titlesUnlocked')) || [];
    setTitlesUnlocked(saved);
  }, []);

  useEffect(() => {
    setTitlesUnlocked((prev) => {
      const newTitles = Object.values(missionConditions)
        .filter(({ condition, title }) => condition && !prev.includes(title))
        .map(({ title }) => title);

      if (newTitles.length === 0) return prev;

      const updated = [...prev, ...newTitles];
      setNewlyUnlocked(newTitles);
      localStorage.setItem('titlesUnlocked', JSON.stringify(updated));

      if (audioRef.current) {
        audioRef.current.play().catch(err => {
          console.warn('Audio play error:', err);
        });
      }

      const timer = setTimeout(() => setNewlyUnlocked([]), 3000);
      return () => clearTimeout(timer);

      return updated;
    });
  }, [missionConditions]);

console.log('RPS Wins:', rpsWins);


  return (
    <section className={s.section}>
      <div className="container">
        <div className={s.wrap}>
          <button className={s.backButton} onClick={() => navigate(-1)}>
            ‚Üê –ù–∞–∑–∞–¥
          </button>

          <h2>–¢–≤–æ–∏ —Ç–∏—Ç—É–ª—ã</h2>

          <audio ref={audioRef} src="/success.mp3" preload="auto" />

          {newlyUnlocked.length > 0 && (
            <div className={s.congrats}>
              üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–∏—Ç—É–ª:
              <strong> {newlyUnlocked.join(', ')}</strong>
            </div>
          )}

          <ul>
            {Object.entries(missionConditions).map(([key, { title, requirement }]) => {
              const unlocked = titlesUnlocked.includes(title);
              return (
                <li key={key} className={unlocked ? s.unlocked : s.locked}>
                  {unlocked ? (
                    <span>{title} ‚úÖ</span>
                  ) : (
                    <span>{requirement} ‚Äî —Ç–∏—Ç—É–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω üîí</span>
                  )}
                </li>
              );
            })}
          </ul>
        </div>
      </div>
    </section>
  );
};

export default MyTituls;
