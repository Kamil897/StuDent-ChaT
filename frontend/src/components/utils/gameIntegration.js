// –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏–≥—Ä —Å backend-login
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—ã —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π

import { saveGameProgress } from '../../utils/gamesApi';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
export const saveGameResult = async (gameName, gameData) => {
  try {
    const result = await saveGameProgress(gameName, {
      score: gameData.score || 0,
      level: gameData.level || 1,
      timeSpent: gameData.timeSpent || 0,
      completed: gameData.completed || false,
    });

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (result.newTitles && result.newTitles.length > 0) {
      showTitleNotification(result.newTitles);
    }

    return result;
  } catch (error) {
    console.error('Error saving game result:', error);
    throw error;
  }
};

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö —Ç–∏—Ç—É–ª–∞—Ö
const showTitleNotification = (titles) => {
  const titleLabels = {
    'Snake Master': '–ú–∞—Å—Ç–µ—Ä –ó–º–µ–π–∫–∏',
    'Math Genius': '–ì–µ–Ω–∏–π –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∏',
    'Asteroid Hunter': '–û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –ê—Å—Ç–µ—Ä–æ–∏–¥–∞–º–∏',
    'Tic Tac Toe Champion': '–ß–µ–º–ø–∏–æ–Ω –ö—Ä–µ—Å—Ç–∏–∫–æ–≤-–ù–æ–ª–∏–∫–æ–≤',
    'Ping Pong Pro': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª –ü–∏–Ω–≥-–ø–æ–Ω–≥–∞',
    'Sharp Shooter': '–ú–µ—Ç–∫–∏–π –°—Ç—Ä–µ–ª–æ–∫',
    'Knowledge Seeker': '–ò—Å–∫–∞—Ç–µ–ª—å –ó–Ω–∞–Ω–∏–π',
    'Don Master': '–ú–∞—Å—Ç–µ—Ä –î–æ–Ω–∞',
    'Game Collector': '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –ò–≥—Ä',
    'High Scorer': '–†–µ–∫–æ—Ä–¥—Å–º–µ–Ω',
  };

  const titleNames = titles.map(title => titleLabels[title] || title).join(', ');
  
  // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const notification = document.createElement('div');
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 15px 20px;
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    z-index: 10000;
    animation: slideIn 0.5s ease-out;
    max-width: 300px;
  `;
  
  notification.innerHTML = `
    <div style="font-weight: bold; margin-bottom: 5px;">üèÜ –ù–æ–≤—ã–π —Ç–∏—Ç—É–ª!</div>
    <div>${titleNames}</div>
  `;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const style = document.createElement('style');
  style.textContent = `
    @keyframes slideIn {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
  `;
  document.head.appendChild(style);

  document.body.appendChild(notification);

  // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    notification.style.animation = 'slideOut 0.5s ease-in';
    setTimeout(() => {
      document.body.removeChild(notification);
    }, 500);
  }, 5000);
};

// –ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä
export const gameIntegrations = {
  // Snake
  snake: {
    onGameEnd: async (score, timeSpent) => {
      return saveGameResult('snake', {
        score,
        timeSpent,
        completed: true
      });
    }
  },

  // Asteroids
  asteroids: {
    onGameEnd: async (score, level) => {
      return saveGameResult('asteroids', {
        score,
        level,
        completed: false
      });
    }
  },

  // Math Battle
  mathbattle: {
    onGameEnd: async (score, timeSpent) => {
      return saveGameResult('mathbattle', {
        score,
        timeSpent,
        completed: true
      });
    }
  },

  // Tic Tac Toe
  tictactoe: {
    onGameEnd: async (won, timeSpent) => {
      return saveGameResult('tictactoe', {
        score: won ? 100 : 0,
        timeSpent,
        completed: won
      });
    }
  },

  // Ping Pong
  pingpong: {
    onGameEnd: async (score, timeSpent) => {
      return saveGameResult('pingpong', {
        score,
        timeSpent,
        completed: false
      });
    }
  },

  // Tir
  tir: {
    onGameEnd: async (score, timeSpent) => {
      return saveGameResult('tir', {
        score,
        timeSpent,
        completed: false
      });
    }
  },

  // Knowledge Maze
  knowledgemaze: {
    onGameEnd: async (completed, timeSpent) => {
      return saveGameResult('knowledgemaze', {
        score: completed ? 100 : 0,
        timeSpent,
        completed
      });
    }
  },

  // Don
  don: {
    onGameEnd: async (score, timeSpent) => {
      return saveGameResult('don', {
        score,
        timeSpent,
        completed: false
      });
    }
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
export const createGameTimer = () => {
  const startTime = Date.now();
  
  return {
    getTimeSpent: () => Math.floor((Date.now() - startTime) / 1000),
    getTimeSpentMinutes: () => Math.floor((Date.now() - startTime) / 60000)
  };
};

